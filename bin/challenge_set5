#!/usr/bin/env ruby 
require 'block_crypto'
require 'string_utils'
require 'pubkey'
require 'dh_clients'
require 'converters'
require 'securerandom'
require 'srp_server'
NIST_PRIME=0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff
def challenge33
  
  #Alice
  p=NIST_PRIME
  g=2
  alice = DiffieHellman.new(p,g)
  bob = DiffieHellman.new(p,g)
  bob_s=bob.session(alice.pub_key)
  alice_s=alice.session(bob.pub_key)

  if alice_s != bob_s
    raise "Challenge 33 failed!" 
  else
    puts "Challenge 33 passed!"
  end
end
def challenge34
  message="Alice was beginning to get very tired of sitting by her sister on the
bank, and of having nothing to do: once or twice she had peeped into the
book her sister was reading, but it had no pictures or conversations in
it, 'and what is the use of a book,' thought Alice 'without pictures or
conversation?'".split("\n")
  #this class structure was inspired from: http://blog.sysca.co.uk/2015/03/matasano-cryptopalschallenges-3334.html
  alice = DiffieHellmanPeer.new("alice",NIST_PRIME,2)
  bob = DiffieHellmanEcho.new("bob",37,2)
  alice.connect(bob)
  bob.connect(alice)
  alice.key_exchange
  
  puts alice
  puts bob
  if alice.aes_key!=bob.aes_key
    raise "Diffie Hellman key exchange error, Challenge 34 failed!"
  end
  alice.close_connection
  bob.close_connection
  mallory = DiffieHellmanMITM.new("mallory",NIST_PRIME,2)

  alice.connect(mallory)
  mallory.connect(alice)
  bob.connect(mallory)
  mallory.connect(bob)
  alice.key_exchange
  mallory.key_exchange
  
  message.each do |m|
    alice.send(m)
  end
  if mallory.aes_key != alice.aes_key
    raise "Challenge 34 failed, mallory's key doesn't match alice's"
  end
  if mallory.aes_key != bob.aes_key
    raise "Challenge 34 failed, mallory's key doesn't match bob's"
  end
  puts "Challenge 34 passed!"
end

def malicious_g(g)
  alice = DHGroups.new("alice",NIST_PRIME,2)
  bob = DHGroups.new("bob",NIST_PRIME,2)
  
  mallory = DHGroupsMITM.new("mallory",NIST_PRIME,g)
  bob.connect(mallory)
  mallory.connect(bob)
  alice.connect(mallory)
  mallory.connect(alice)
  alice.key_exchange
  if mallory.aes_key!=alice.aes_key
    puts mallory
    puts mallory.aes_key.unpack("H*")[0]
    puts alice.aes_key.unpack("H*")[0]
    raise "Challenge 35: Mallory's key does not match alice's"
  end
  if mallory.aes_key!=bob.aes_key
    puts mallory
    puts mallory.aes_key.unpack("H*")[0]
    puts bob.aes_key.unpack("H*")[0]
    raise "Challenge 35: Mallory's key does not match bob's"
  end
end
def challenge35
  # malicious_g(1)
  # malicious_g(NIST_PRIME)
  malicious_g(NIST_PRIME-1)
  puts "Challenge 35 passed!"
end
def challenge36
  server = SRPServer.new
  client = SRPClient.new("foo@bar.com","password")
  client.connect(server)
  server.register(client,"foo@bar.com","password")
  begin 
    client.login
  rescue Exception => e
    puts "Login failed! #{e.message}"
    raise "Challenge 36 failed!"
  end
  puts "Challenge 36 passed!"
end
class SRPBadClient < SRPClient
  def login(pubA)
    @server.login(@email,pubA)
  end
  def verify(salt,pubB)
    k = Digest::SHA2.digest("0")
    hmac_key = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'),k,[salt.to_s(16)].pack("H*"))
    if @server.verify(hmac_key)
      puts "Logged in!"
    else
      raise "Secure Remote Password authetication failed"
    end
  end
end
def challenge37
  server = SRPServer.new
  client = SRPBadClient.new("foo@bar.com","password")
  client.connect(server)
  server.register(client,"foo@bar.com","password")
  0.upto(2) do |i|
    begin 
      client.login(i*NIST_PRIME)
    rescue Exception => e
      puts "Login failed! #{e.message}"
      raise "Challenge 37 failed!"
    end
  end
  puts "Challenge 37 passed!"
end
def challenge38
  words = File.read("/usr/share/dict/words").split("\n").slice(0,500)
  password = words[rand(0..words.size-1)]
  server = SimpleSRPServer.new
  client = SimpleSRPClient.new("foo@bar.com",password)
  server.register(client,"foo@bar.com",password)
  # mitm!
  mallory = SimpleSRPMITM.new
  client.connect(mallory)
  mallory.connect(client)
  client.login
  puts "Cracked Password: #{mallory.cracked_pw}"
  if mallory.cracked_pw != password
    raise "Challenge 38 failed!"
  else
    puts "Challenge 38 passed!"
  end
end
def challenge39
  pub_key,key = RSA.gen_pair(3)
  message ="Hello World"
  ct = RSA.encrypt(message,pub_key)
  pt = RSA.decrypt(ct,key)
  if message != pt
    raise "RSA Encryption failed"
  else
    puts "Challenge 39 passed!"
  end
end
def challenge40
end
def run_challenges
  # challenge33
  # challenge34
  # challenge35
  # challenge36
  # challenge37
  # challenge38
  # challenge39
  challenge40
end
run_challenges
