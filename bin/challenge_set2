#!/usr/bin/env ruby 
require 'curb'
require 'crypto_tools'
require 'block_crypto'
require 'openssl'

def challenge9
  if Converters.str_to_hex("YELLOW SUBMARINE".pkcs7pad(20)).slice(32,8)!="04040404"
    raise "Error padding string to 20 bytes!"
  else
    puts "Challenge 9 passed!"
  end
end
def challenge10
  cipher_http = Curl.get("http://cryptopals.com/static/challenge-data/10.txt")
  key="YELLOW SUBMARINE"
  iv=Converters.hex_to_bytes("00000000000000000000000000000000")
  clear_text=BlockCrypto.aes_cbc_decrypt(Base64.decode64(cipher_http.body_str),key,iv)
  if clear_text.split(/\n/)[-1] != "Play that funky music "
    raise "Challenge 10 failed!"
  else
    puts "Challenge 10 passed!"
  end
end
def challenge11
  ecb_times=0
  ntimes=1000
  ntimes.times do |i| 
    ecb_cipher_text=CryptoTools.detect_aes_ecb(BlockCrypto.encryption_oracle("A"*256))
    if ecb_cipher_text.length > 0
      ecb_times+=1
    end
  end
  detected_frac=Float(ecb_times)/ntimes
  if (detected_frac-0.5).abs < 0.1
    puts "Challenge 11 passed!"
  else
    raise sprintf "Challenge 11 failed, fraction detected %.3g %% of %d",detected_frac,ntimes
  end
end
def challenge12
  unknown_string=Base64.decode64(["Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg",
                                  "aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq",
                                  "dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg",
                                  "YnkK"].join)
  decoded_str=BlockCrypto.break_aes_ecb(unknown_string)
  if decoded_str!=unknown_string
    raise "Challenge 12 failed!"
  else
    puts "Challenge 12 passed!"
  end
end
class Server
  @@aes_key = BlockCrypto.random_byte_string(16)
  def parse_cookie(cookie_str)
    session = Hash.new("")
    cookie_str.split("&").each do |pair| 
      key,value=pair.split("=")
      session[key]=value
    end
    return session
  end
  def encode_raw_cookie(session)
    cookie=""
    session.each do |key,value| 
      cookie+=sprintf("%s=%s&",key,value)
    end
    return cookie.slice(0,cookie.length-1)
  end
  def sanitize(string)
    return string.scan(/[^&=]/).join
  end
  def profile_for(email)
    session = Hash.new("")
    session["email"]=sanitize(email)
    session["uid"]=10
    session["role"]="user"
    return encode_raw_cookie(session)
  end
  def issue_cookie(email_addr)
    return Converters.str_to_hex(BlockCrypto.AES_128_ECB(profile_for(email_addr),@@aes_key))
  end
  def decode_cookie(hex_encoded_cookie)
    ecb_decipher = OpenSSL::Cipher.new 'AES-128-ECB'
    ecb_decipher.decrypt
    ecb_decipher.key=@@aes_key
    raw_cookie = ecb_decipher.update(Converters.hex_to_bytes(hex_encoded_cookie))+ecb_decipher.final
    return parse_cookie(raw_cookie)
  end
  def admin?(cookie)
    session = decode_cookie(cookie)
    return session["role"]=="admin"
  end
end
def challenge13
  server = Server.new
  email="fooAA@bar.com"
  # carefuly aligned so role= is at the end of the second cipher text block
  user_cookie=server.issue_cookie(email)
  attack_email=("A"*10+"admin").pkcs7pad(26)
  # carefuly aligned so admin+pkcs7padding is at the end of the second
  # cipher text block
  admin_cookie=server.issue_cookie(attack_email).blocks(32)[1]
  if server.admin?(user_cookie.slice(0,64)+admin_cookie)
    puts "Challenge 13 passed! Obtained admin access!"
  else
    raise "Challenge 13 failed, you are a normal user."
  end
end
def challenge14
  unknown_string=Base64.decode64(["Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg",
                                  "aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq",
                                  "dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg",
                                  "YnkK"].join)
  decoded_str=BlockCrypto.break_aes_ecb(unknown_string,true)
  if decoded_str!=unknown_string
    raise "Challenge 14 failed!"
  else
    puts "Challenge 14 passed!"
  end
end
def challenge15
  if "ICE ICE BABY\x04\x04\x04\x04".pkcs7strip != "ICE ICE BABY"
    raise "Did not strip valid pkcs7 padding!"
  end
  begin
    if "ICE ICE BABY\x05\x05\x05\x05".pkcs7strip != "ICE ICE BABY"
      raise "Stripping pkcs7 failed!"
    end
  rescue EncodingError
    puts "Detected invalid pkcs7 padding"
    begin 
      if "ICE ICE BABY\x01\x02\x03\x04".pkcs7strip != "ICE ICE BABY"
        raise "Stripping pkcs7 failed!"
      end
    rescue EncodingError
      puts "Detected invalid pkcs7 padding"
    end
  end
  puts "Challenge 15 passed!"
end
def run_challenges
  challenge9
  challenge10
  challenge11
  challenge12
  challenge13
  challenge14
  challenge15
end


run_challenges

