#!/usr/bin/env ruby 
require 'curb'
require 'crypto_tools'
require 'openssl'

def challenge1
  if Converters.hex_to_base64("49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d") != "SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t"
    raise "Challenge 1 failed!"
  else
    puts "Challenge 1 passed!"
  end
end

def challenge2
  if CryptoTools.hex_xor("1c0111001f010100061a024b53535009181c","686974207468652062756c6c277320657965") != "746865206b696420646f6e277420706c6179"
    raise "Challenge 2 failed!"
  else
    puts "Challenge 2 passed!"
  end
end
 
def challenge3
  cipher_text = "1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736"
  key,score=CryptoTools.break_xor(cipher_text)
  if key != "X"
    puts Converters.hex_to_bytes(CryptoTools.hex_xor_key(cipher_text,Converters.str_to_hex(key)))
    raise "Challenge 3 failed!"
  else
    puts "Challenge 3 passed!"
  end
end

def challenge4
  cipher_http = Curl.get("http://cryptopals.com/static/challenge-data/4.txt")
  key=""
  # minscore
  key,cleartext=CryptoTools.detect_xor(cipher_http.body_str)
  if key != "5"
    puts key,cleartext
    raise "Challenge 4 failed!"
  else
    puts sprintf "%s %s","Challenge 4 passed!",cleartext
  end
  nil
end

def challenge5
  if CryptoTools.str_xor_key("Burning 'em, if you ain't quick and nimble
I go crazy when I hear a cymbal","ICE")!="0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f"
    raise "Challenge 5 failed!"
  else
    puts "Challenge 5 passed!"
  end
end
def challenge6
  cipher_http = Curl.get("http://cryptopals.com/static/challenge-data/6.txt")
  cipher_byte_str=Base64.decode64(cipher_http.body_str)
  keylen=CryptoTools.find_keylen(cipher_byte_str)
  key=CryptoTools.break_xor_key(cipher_byte_str,keylen)
  if key != "Terminator X: Bring the noise"
    puts key,keylen
    # puts Converters.hex_to_bytes(CryptoTools.str_xor_key(cipher_byte_str,key))  
    raise 'Challenge 6 failed!'
  else
    puts "Challenge 6 passed!"
    puts Converters.hex_to_bytes(CryptoTools.str_xor_key(cipher_byte_str,key))  
  end
end

def challenge7
  aes_http = Curl.get("http://cryptopals.com/static/challenge-data/7.txt")
  cipher_txt=Base64.decode64(aes_http.body_str)
  aes_key="YELLOW SUBMARINE" # neato 16 bytes!
  cipher = OpenSSL::Cipher.new 'AES-128-ECB'
  cipher.decrypt
  cipher.key=aes_key
  clear_text = cipher.update(cipher_txt) + cipher.final
  puts clear_text
end

def challenge8
  cipher_http = Curl.get("http://cryptopals.com/static/challenge-data/8.txt")
  ecb_text=CryptoTools.detect_aes_ecb(cipher_http.body_str)
  if ecb_text.slice(0,16)!="d880619740a8a19b"
    raise "Could not detect ECB in challenge 8 input file"
  else
    printf "Challenge 8 passed! %s\n",ecb_text
  end
end

def run_challenges
  challenge1
  challenge2
  challenge3
  challenge4
  challenge5
  challenge6
  challenge7
  challenge8
end
run_challenges

