* The Matasano Crypto Challenges
These are my solutions to the cryptography challenges on
[[cryptopals.com]].  

I've written a write up relating to challenge 23: [[https://dbjergaard.github.io/posts/untempering_mersenne_twister.html][Untempering the
Mersenne Twister RNG]]

You can also find high level overviews of the different sets here:
https://dbjergaard.github.io/

I hope to write up solutions to the other challenges that were fun or
difficult, but I haven't had time just yet.  

If you're working through the challenges yourself please do not read my
solutions until you've got a working version.  It can be useful to see
how other people think about problems, but you won't learn as much if
you look at the solution before solving it yourself. Feel free to
email me if you have questions and want to discuss strategies!

** Challenge Set 1 [8/8]
   - [X] Convert hex to base64
   - [X] Fixed XOR
   - [X] Single-byte XOR cipher
   - [X] Detect single-character XOR
   - [X] Implement repeating-key XOR
   - [X] Break repeating-key XOR
   - [X] AES in ECB mode
   - [X] Detect AES in ECB mode
** Challenge Set 2 [8/8]
   - [X] Implement PKCS#7 padding
   - [X] Implement CBC mode
   - [X] An ECB/CBC detection oracle
   - [X] Byte-at-a-time ECB decryption (Simple)
   - [X] ECB cut-and-paste
   - [X] Byte-at-a-time ECB decryption (Harder)
   - [X] PKCS#7 padding validation
   - [X] CBC bitflipping attacks
** Challenge Set 3 [8/8]
   - [X] The CBC padding oracle
   - [X] Implement CTR, the stream cipher mode
   - [X] Break fixed-nonce CTR mode using substitions
   - [X] Break fixed-nonce CTR statistically
   - [X] Implement the MT19937 Mersenne Twister RNG
   - [X] Crack an MT19937 seed
   - [X] Clone an MT19937 RNG from its output
   - [X] Create the MT19937 stream cipher and break it
** Challenge Set 4 [8/8]
   - [X] Break "random access read/write" AES CTR
   - [X] CTR bitflipping
   - [X] Recover the key from CBC with IV=Key
   - [X] Implement a SHA-1 keyed MAC
   - [X] Break a SHA-1 keyed MAC using length extension
   - [X] Break an MD4 keyed MAC using length extension
   - [X] Implement and break HMAC-SHA1 with an artificial timing leak
   - [X] Break HMAC-SHA1 with a slightly less artificial timing leak
** Challenge Set 5 [8/8]
   - [X] Implement Diffie-Hellman
   - [X] Implement a MITM key-fixing attack on Diffie-Hellman with parameter injection
   - [X] Implement DH with negotiated groups, and break with malicious "g" parameters
   - [X] Implement Secure Remote Password (SRP)
   - [X] Break SRP with a zero key
   - [X] Offline dictionary attack on simplified SRP
   - [X] Implement RSA
   - [X] Implement an E=3 RSA Broadcast attack
** Challenge Set 6 [2/8]
   - [X] Implement unpadded message recovery oracle
   - [X] Bleichenbacher's e=3 RSA Attack
   - [ ] DSA key recovery from nonce
   - [ ] DSA nonce recovery from repeated nonce
   - [ ] DSA parameter tampering
   - [ ] RSA parity oracle
   - [ ] Bleichenbacher's PKCS 1.5 Padding Oracle (Simple Case)
   - [ ] Bleichenbacher's PKCS 1.5 Padding Oracle (Complete Case)
** Bonus Challenge Set 7 [/]
   - [ ] CBC-MAC Message Forgery
   - [ ] Hashing with CBC-MAC
   - [ ] Compression Ratio Side-Channel Attacks
   - [ ] Iterated Hash Function Multicollisions
   - [ ] Kelsey and Schneier's Expandable Messages
   - [ ] Kelsey and Kohno's Nostradamus Attack
   - [ ] MD4 Collisions
   - [ ] RC4 Single-Byte Biases
